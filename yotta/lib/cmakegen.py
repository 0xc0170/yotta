# standard library modules, , ,
import string
import os
import logging

# fsutils, , misc filesystem utils, internal
import fsutils

CMakeLists_Template = string.Template(
'''#
# NOTE: This file is generated by yotta: changes will be overwritten!
#
cmake_minimum_required(VERSION 2.8)

#set(CMAKE_TOOLCHAIN_FILE $toolchain_file)

project($component_name)

# include own root directory
$include_own_dir

# include root directories of all components we depend on
$include_root_dirs

# recurse into dependencies that aren't built elsewhere
$add_depend_subdirs

# recurse into subdirectories for this component, using the two-argument
# add_subdirectory because the directories referred to here exist in the source
# tree, not the working directory
$add_own_subdirs

'''
)

Ignore_Subdirs = set(('build',))

class CMakeGen(object):
    def __init__(self, directory):
        super(CMakeGen, self).__init__()
        self.buildroot = directory

    def generateRecursive(self, component, builddir=None, available_components=None):
        ''' generate top-level CMakeLists for this component and its
            dependencies: the CMakeLists are all generated in self.buildroot,
            which MUST be out-of-source
        '''
        if builddir is None:
            builddir = self.buildroot
        if available_components is None:
            available_components = dict()

        logging.debug('generate build files: %s' % component)
        dependencies = component.getDependencies(available_components)
        new_dependencies = {name:c for name,c in dependencies.items() if c and not name in available_components}

        self.generate(builddir, component, new_dependencies, dependencies)
        available_components.update(new_dependencies)
        for name, c in new_dependencies.items():
            self.generateRecursive(c, os.path.join(builddir, name), available_components)

    def generate(self, builddir, component, active_dependencies, all_dependencies):
        ''' active_dependencies is the dictionary of components that need to be
            built for this component, but will not already have been built for
            another component.
        '''

        include_own_dir = string.Template(
            'include_directories("$path")\n'
        ).substitute(path=component.path)

        include_root_dirs = ''
        for name, c in all_dependencies.items():
            include_root_dirs += string.Template(
                'include_directories("$path")\n'
            ).substitute(path=c.path)

        add_depend_subdirs = ''
        for name, c in active_dependencies.items():
            add_depend_subdirs += string.Template(
                'add_subdirectory("$working_dir/$component_name")\n'
            ).substitute(
                working_dir=builddir,
                component_name=name
            )

        add_own_subdirs = ''
        for f in os.listdir(component.path):
            if f in Ignore_Subdirs:
                continue
            if os.path.isfile(os.path.join(component.path, f, 'CMakeLists.txt')):
                add_own_subdirs += string.Template(
                    '''add_subdirectory(
    "$component_source_dir/$subdir_name"
    "$working_dir/$subdir_name"
)
'''
                ).substitute(
                    component_source_dir=component.path,
                    working_dir=builddir,
                    subdir_name=f
                )

        file_contents = CMakeLists_Template.substitute(
            toolchain_file='TODO: target toolchain files',
            component_name=component.getName(),
            include_own_dir=include_own_dir,
            include_root_dirs=include_root_dirs,
            add_depend_subdirs=add_depend_subdirs,
            add_own_subdirs=add_own_subdirs
        )
        fsutils.mkDirP(builddir)
        with open(os.path.join(builddir, 'CMakeLists.txt'), 'w') as f:
            f.write(file_contents)


        
